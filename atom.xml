<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tSupan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-22T11:48:15.473Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tSupan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="http://yoursite.com/2020/07/22/%E6%A6%82%E7%8E%87%E8%AE%BA/"/>
    <id>http://yoursite.com/2020/07/22/概率论/</id>
    <published>2020-07-22T09:26:01.037Z</published>
    <updated>2020-07-22T11:48:15.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汤老名言">汤老名言</h1><p>这东西简单得一塌糊涂</p><h1 id="概率论基本概念">概率论基本概念</h1><h2 id="随机试验">随机试验</h2><p>所有可能结果组成的集合称为E的样本空间，记为S.样本空间的元素，即E的每个结果为样本点</p><h2 id="样本空间随机事件">样本空间、随机事件</h2><p>E为随机事件，E里面只有一个元素则叫基本事件，S包含所有事件则为必然事件，∅则为不可能事件</p><h3 id="事件之间的关系">事件之间的关系</h3><h4 id="包含">包含</h4><p>B里面有A事件，A发生则B也发生</p><p><span class="math display">\[A\subset B\]</span></p><p><span class="math display">\[(A\subset B) \land (B\subset A) \rightarrow A=B\]</span></p><h4 id="和">和</h4><p>n个事件任意一个发生</p><p><span class="math display">\[A_1 \cup A_2 \cup A_3 ... \cup A_n\]</span></p><h4 id="积">积</h4><p>n个事件同时发生 <span class="math display">\[A_1\cap A_2 ... \cap A_n\]</span></p><h4 id="差">差</h4><p>A发生，B不发生 <span class="math display">\[A-B\]</span></p><h4 id="互斥">互斥</h4><p>A和B不可能同时发生 <span class="math display">\[A\cap B=∅\]</span></p><h4 id="对立">对立</h4><p>太极的阴阳形状 <span class="math display">\[P{A}+P{B}=1 \text{并且} A\cap B=∅\]</span></p><h3 id="计算规律德摩根律需注意">计算规律（德摩根律需注意）</h3><p>交换律，结合律，分配律，德摩根律</p><h2 id="频率与概率">频率与概率</h2><h3 id="频率">频率</h3><h4 id="定义">定义</h4><p>n次试验中，事件A发生的次数<span class="math inline">\(n_A\)</span>称为事件A的频数，比值<span class="math inline">\(frac{n_A}{n}\)</span>为频率，并记为<span class="math inline">\(f_n(A)\)</span></p><h4 id="性质">性质</h4><p><span class="math display">\[0\le f_n(A\le 1\]</span> <span class="math display">\[f_n(S)=1\]</span> <span class="math display">\[f_n(A_1\cap A_2\cap ... \cap A_k)=f_n(A_1)+f_n(A_2)+...+f_n(A_k)\]</span></p><h3 id="概率">概率</h3><h4 id="性质-1">性质</h4><p>1.非负性</p><p>2.规范性</p><p>3.可列可加性</p><h2 id="等可能概型古典概型">等可能概型（古典概型）</h2><h2 id="条件概率">条件概率</h2><h2 id="独立性">独立性</h2><h1 id="随机变量及其分布">随机变量及其分布</h1><h2 id="随机变量">随机变量</h2><h2 id="离散型随机变量及其分布律">离散型随机变量及其分布律</h2><h2 id="连续型随机变量及其概率密度">连续型随机变量及其概率密度</h2><h2 id="随机变量的函数的分布">随机变量的函数的分布</h2><h1 id="多维随机变量及其分布">多维随机变量及其分布</h1><h2 id="二维随机变量">二维随机变量</h2><h2 id="边缘分布">边缘分布</h2><h2 id="条件分布">条件分布</h2><h2 id="相互独立的随机变量">相互独立的随机变量</h2><h2 id="两个随机变量的函数的分布">两个随机变量的函数的分布</h2><h1 id="随机变量的数学特征">随机变量的数学特征</h1><h2 id="数学期望">数学期望</h2><h2 id="方差">方差</h2><h2 id="协方差及相关系数">协方差及相关系数</h2><h2 id="矩协方差矩阵">矩、协方差矩阵</h2><h1 id="大数定律及中心极限定理">大数定律及中心极限定理</h1><h2 id="中心极限定理">中心极限定理</h2><h1 id="数理统计分割线--------">--------数理统计分割线--------</h1><h1 id="样本及抽样分布">样本及抽样分布</h1><h2 id="随机样本">随机样本</h2><h2 id="抽样分布">抽样分布</h2><h1 id="参数估计">参数估计</h1><h2 id="点估计">点估计</h2><h2 id="基于截尾样本的最大似然估计">基于截尾样本的最大似然估计</h2><h2 id="估计量的评选标准">估计量的评选标准</h2><h2 id="区间估计">区间估计</h2><h1 id="假设检验">假设检验</h1><h2 id="假设检验-1">假设检验</h2><h2 id="正态总体均值的假设检验">正态总体均值的假设检验</h2><h2 id="正态总体方差的假设检验">正态总体方差的假设检验</h2><h2 id="置信区间的假设检验之间的关系">置信区间的假设检验之间的关系</h2><h2 id="样本容量的选取">样本容量的选取</h2><h2 id="分布拟合检验">分布拟合检验</h2><h2 id="秩和检验">秩和检验</h2><h2 id="假设检验问题的p值检验法">假设检验问题的p值检验法</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汤老名言&quot;&gt;汤老名言&lt;/h1&gt;
&lt;p&gt;这东西简单得一塌糊涂&lt;/p&gt;
&lt;h1 id=&quot;概率论基本概念&quot;&gt;概率论基本概念&lt;/h1&gt;
&lt;h2 id=&quot;随机试验&quot;&gt;随机试验&lt;/h2&gt;
&lt;p&gt;所有可能结果组成的集合称为E的样本空间，记为S.样本空间的元素，即E的每个
      
    
    </summary>
    
      <category term="概率论与数理统计" scheme="http://yoursite.com/categories/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="公式整理" scheme="http://yoursite.com/tags/%E5%85%AC%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理概论</title>
    <link href="http://yoursite.com/2020/05/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E6%A6%82%E8%AE%BA/"/>
    <id>http://yoursite.com/2020/05/28/计算机组成原理概论/</id>
    <published>2020-05-28T12:00:43.861Z</published>
    <updated>2020-05-28T12:58:28.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cpu提高性能方法今后发展方向">CPU提高性能方法（今后发展方向）</h1><h2 id="进一步提高电路复杂性">进一步提高电路复杂性</h2><p>采用传统的指令级并行方法加速单线程应用，采用更多功能部件、多级 Cache、更宽的超标量。</p><h2 id="通过线程进程并行性">通过线程/进程并行性</h2><p>如多处理器、多线程处理器等。</p><h2 id="将存储器集成到处理器芯片内来提高其性能">将存储器集成到处理器芯片内来提高其性能</h2><p>这样可使访存延时减少 5～10 倍以上，存储器带宽可增加 50～100 倍。</p><h2 id="发展嵌入式处理器">发展嵌入式处理器</h2><p>嵌入式处理器实现高性能的途径与通用处理器不同，大多针对专门的应用领域来专门设计以满足高性能、低成本和低功耗的要求。</p><p>例如，手机和个人移动通信设备要求具有高性能的数字信号处理能力和超低功耗；视频游戏控制要求高性能的图形处理能力等等。嵌入式处理器体系结构需要在新技术与产品、市场与应用需求之间取得平衡，设计方法趋向于专用、定制和自动化。</p><h1 id="计算机的主要性能指标">计算机的主要性能指标</h1><h2 id="机器字长土话就是多少位">机器字长（土话就是多少位）</h2><ol type="1"><li><p>机器字长是指 CPU 一次能处理的数据位数，它决定了寄存器、运算部件、数据总线的位数。字长越长，数的表示范围也越大，精度也越高，但其相应的硬件成本也越高。因此为 了适应不同的设计需要，较好地协调数据精度与硬件成本的关系，在硬件或软件上可以采用 变字长运算，如采用半字长、全字长或双字长等等。</p></li><li><p>机器字长还会影响机器的运算速度。因为，假设 CPU字长短，而运算的数据位数较多，则需要经过多次运算才能完成，这样势必会影响整机的运算速度。</p></li><li><p>机器字长和机器指令存在着密切的关系，指令和数据都是存放在主存储器中，因此指令长度受到机器字长的限制，机器字长对指令系统的功能也有着影响。一般指令长度可以是机器字长的整数倍。</p></li></ol><h2 id="存储容量">存储容量</h2><ol type="1"><li><p>存储器容量应包括主存储器容量和辅助存储器容量。主存储器指 CPU 能通过地址线直接访问的存储器，如RAM、ROM等；辅助存储器是主存储器以外的存储器，如磁盘、U盘等。</p></li><li><p>主存储器容量是指主存中存放数据的字节（以字节为单位）或字（以字为单位）的数量，以字节为单位表示主存每个单元存放一个字节数据，而以字为单位则表示主存每个单元存放一个字数据。</p></li><li><p>以字节为单位的主存容量用字节数乘以字节长度来表示主存容量：</p><p><strong><em>存储容量＝存储单元个数×字节长度</em></strong></p></li><li><p>以字为单位的主存容量用字数乘以存储字长来表示主存容量：</p><p><strong><em>存储容量＝存储单元个数×存储字长</em></strong></p></li><li><p>现代大多计算机以字节为单位来表示主存储器的容量，如64MB、128MB、256MB主存等等。辅助存储器的容量一般以字节数来表示，如某机硬盘容量为20GB。</p></li></ol><h2 id="运算速度">运算速度</h2><p>计算机的运算速度与许多因素有关，如机器的主频、执行何种操作、访问存储器的速度 等。早期曾经采用综合折算的方法，它综合考虑每条指令的执行时间以及它们在全部操作中所占的百分比。即：</p><p><span class="math display">\[T_M=\sum_{i=1}^nf_it_i\]</span></p><p><span class="math inline">\(T_M\)</span>为机器运行速度</p><p><span class="math inline">\(f_i\)</span>为第 i 种指令占全部操作的百分比数 i</p><p><span class="math inline">\(t_i\)</span>为第 i 种指令的执行时间</p><p>现在普遍采用单位时间内执行指令的平均条数来作为运算速度的指标。并用 MIPS（Million Instruction Per Second）每秒多少百万条指令表示，例如，某机器每秒可执行 400 万条指令，则记为 4MIPS。也可以用 CPI（Cycle Per Instruction）执行一条指令所需的周期数表示，或者用 FPOPS（Floating Point Operation Per Second ）每秒浮点运算次数来衡量运算速度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cpu提高性能方法今后发展方向&quot;&gt;CPU提高性能方法（今后发展方向）&lt;/h1&gt;
&lt;h2 id=&quot;进一步提高电路复杂性&quot;&gt;进一步提高电路复杂性&lt;/h2&gt;
&lt;p&gt;采用传统的指令级并行方法加速单线程应用，采用更多功能部件、多级 Cache、更宽的超标量。&lt;/p&gt;

      
    
    </summary>
    
      <category term="计算机组成原理" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="计算机组成原理" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>级数</title>
    <link href="http://yoursite.com/2020/05/17/%E7%BA%A7%E6%95%B0/"/>
    <id>http://yoursite.com/2020/05/17/级数/</id>
    <published>2020-05-17T09:00:01.423Z</published>
    <updated>2020-05-17T09:54:14.509Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念和性质">概念和性质</h1><p>类似于小学学的无理数</p><p>例子：0.9999999999999...9</p><p>级数：<span class="math inline">\(\sum_{i=1}^{∞}u_i\)</span></p><p>级数极限：<span class="math inline">\(\lim_{n\rightarrow ∞}s_n=s\)</span></p><p>级数每一项记为：<span class="math inline">\(u_n\)</span></p><h2 id="定义">定义</h2><p>级数<span class="math inline">\(\sum_{i=1}^{∞}u_i\)</span>的部分和<span class="math inline">\(s_n\)</span>有极限的话，该级数收敛；如果没有极限，则为发散。</p><h2 id="等比级数几何级数">等比级数（几何级数）</h2><p><span class="math display">\[\sum_{i=1}^{∞}aq^i = \begin{cases}\text{发散}\ \ |q|\ge 1 \\\text{收敛于}\frac{aq}{1-q}\ \ |q|&lt;1\end{cases}\]</span></p><h2 id="必要条件">必要条件</h2><p>如果级数收敛，一般项<span class="math inline">\(u_n\)</span>趋于0f <span class="math display">\[\lim_{n\rightarrow ∞}=0\]</span></p><h2 id="调和级数需记">调和级数（需记）</h2><p>调和级数<span class="math inline">\(\sum_{i=1}^{∞}\frac{1}{n}\)</span>发散</p><h2 id="柯西审敛原理空">柯西审敛原理（空）</h2><h1 id="常数项级数">常数项级数</h1><h2 id="审敛法重要">审敛法（重要）</h2><h3 id="比较审敛法">比较审敛法</h3><p><span class="math inline">\(a_n\le b_n\)</span>，且b级数收敛，则a级数收敛</p><p><span class="math inline">\(a_n\ge b_n\)</span>，且b级数发散，则a级数发散</p><h4 id="极限形式">极限形式</h4><p><span class="math inline">\(\lim_{n\rightarrow ∞}\frac{u_n}{v_n}=l\ \ (0\le l &lt; +∞)\)</span>，且v级数收敛，则u级数收敛</p><p><span class="math inline">\(\lim_{n\rightarrow ∞}\frac{u_n}{v_n}=l &gt; 0\)</span>或<span class="math inline">\(\lim_{n\rightarrow ∞}\frac{u_n}{v_n}= +∞\)</span>，且v级数发散，则u级数发散</p><h3 id="比值审敛法">比值审敛法</h3><p>有级数为正项级数<span class="math inline">\(\sum_{n=1}^{∞}u_n\)</span></p><p><span class="math display">\[\lim_{n\rightarrow ∞}\frac{u_{n+1}}{u_n}=\rho\]</span></p><p><span class="math inline">\(\rho &lt; 1\)</span>收敛，<span class="math inline">\(\rho &gt; 1\ \ \text{或}\ \ \lim_{n\rightarrow ∞}\frac{u_{n+1}}{u_n}=∞\)</span>发散，<span class="math inline">\(\rho = 1\)</span>不确定</p><h3 id="根值审敛法柯西判别法">根值审敛法（柯西判别法）</h3><p>有级数为正项级数<span class="math inline">\(\sum_{n=1}^{∞}u_n\)</span></p><p><span class="math display">\[\lim_{n\rightarrow ∞}\sqrt[n]{u_n}=\rho\]</span></p><p><span class="math inline">\(\rho &lt; 1\)</span>收敛，<span class="math inline">\(\rho &gt; 1\ \ \text{或}\ \ \lim_{n\rightarrow ∞}\frac{u_{n+1}}{u_n}=∞\)</span>发散，<span class="math inline">\(\rho = 1\)</span>不确定</p><h3 id="极限审敛法">极限审敛法</h3><p>有级数为正项级数<span class="math inline">\(\sum_{n=1}^{∞}u_n\)</span></p><h4 id="情况1">情况1</h4><p><span class="math display">\[\lim_{n\rightarrow ∞}nu_n=l&gt;0\ \text{或}\ =+∞\]</span></p><p>级数发散</p><h4 id="情况2">情况2</h4><p><span class="math inline">\(p&gt;1\)</span></p><p><span class="math display">\[\lim_{n\rightarrow ∞}n^p u_n=l \ \ (0\le l &lt; +∞)\]</span></p><p>级数收敛</p><h2 id="交错级数及审敛法">交错级数及审敛法</h2><h3 id="莱布尼兹定理审敛法之一">莱布尼兹定理（审敛法之一）</h3><p>交错级数<span class="math inline">\(\sum_{n=1}^{∞}(-1)^{n-1}u_n\)</span>满足下面条件则为收敛：</p><ol type="1"><li><p><span class="math inline">\(u_n \ge u_{n+1}\ \ (n=1,2,3,...,n)\)</span></p></li><li><p><span class="math inline">\(\lim_{n\rightarrow ∞}=0\)</span></p></li></ol><p>并且级数其和<span class="math inline">\(s \le u_1\)</span>，余项<span class="math inline">\(r_n\)</span>的绝对值<span class="math inline">\(|r_n| \le u_{n+1}\)</span></p><h2 id="绝对收敛和条件收敛">绝对收敛和条件收敛</h2><p>前提：级数本身是收敛的</p><p>级数加绝对值符号，如果级数还收敛，则为绝对收敛；如果加绝对值符号后的级数发散，则为条件收敛。</p><p>A推B： <span class="math display">\[\text{绝对收敛}\rightarrow \text{必定收敛}\]</span></p><h1 id="幂级数空">幂级数（空）</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念和性质&quot;&gt;概念和性质&lt;/h1&gt;
&lt;p&gt;类似于小学学的无理数&lt;/p&gt;
&lt;p&gt;例子：0.9999999999999...9&lt;/p&gt;
&lt;p&gt;级数：&lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^{∞}u_i\)&lt;/span&gt;&lt;/p
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="定积分" scheme="http://yoursite.com/tags/%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    
      <category term="级数" scheme="http://yoursite.com/tags/%E7%BA%A7%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>曲线积分与曲面积分</title>
    <link href="http://yoursite.com/2020/05/12/%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/"/>
    <id>http://yoursite.com/2020/05/12/曲线积分与曲面积分/</id>
    <published>2020-05-12T10:28:10.150Z</published>
    <updated>2020-05-13T04:05:02.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对弧长的曲线积分第一类曲线积分">对弧长的曲线积分（第一类曲线积分）</h1><h2 id="作用">作用</h2><p>求弧长</p><h2 id="计算方法">计算方法</h2><p><span class="math display">\[\begin{cases}x=\varphi (t)\\\\y=\psi (t)\end{cases}(\alpha \leq t \leq \beta)\]</span> 前提条件：<span class="math inline">\(\varphi (t)\)</span>、<span class="math inline">\(\psi (t)\)</span>在<span class="math inline">\([\alpha,\beta]\)</span>有连续一阶导数，且<span class="math inline">\(\varphi &#39;^2(t) +\psi &#39;^2(t)\neq 0\)</span></p><p>则 <span class="math display">\[\int_Lf(x,y)ds=\int_{\alpha}^{\beta}f[\varphi (t),\psi (t)]\sqrt{\varphi &#39;^2(t) +\psi &#39;^2(t)}dt \ \ (\alpha &lt; \beta)\]</span></p><h2 id="推广到空间曲线弧">推广到空间曲线弧</h2><p><span class="math display">\[\int_Lf(x,y,z)ds=\int_{\alpha}^{\beta}f[\varphi (t),\psi (t),\omega (t)]\sqrt{\varphi &#39;^2(t) +\psi &#39;^2(t)+\omega &#39;^2(t)}dt\ \ (\alpha &lt; \beta)\]</span></p><h2 id="特殊情形">特殊情形</h2><p>也就是说少了谁就函数对谁求导</p><h3 id="二维">二维</h3><p><span class="math display">\[\int_Lf(x,y)ds=\int_{0}^{x_0}f[x,\psi (x)]\sqrt{1 +\psi &#39;^2(x)}dx \ \ (x_0 &lt; X)\]</span> <span class="math display">\[\int_Lf(x,y)ds=\int_{0}^{y_0}f[\varphi (y),y]\sqrt{\varphi &#39;^2(y) + 1}dy \ \ (y_0 &lt; Y)\]</span></p><h3 id="三维">三维</h3><p><span class="math display">\[\int_Lf(x,y,z)ds=\int_{\alpha}^{\beta}f[\varphi (t),\psi (t),\omega (t)]\sqrt{\varphi &#39;^2(t) +\psi &#39;^2(t)+\omega &#39;^2(t)}dt\ \ (\alpha &lt; \beta)\]</span></p><h1 id="对坐标的曲线积分第二类曲线积分">对坐标的曲线积分（第二类曲线积分）</h1><h2 id="作用-1">作用</h2><p>求做功（物理上）</p><h2 id="计算方法-1">计算方法</h2><p>同上，前提条件大致相同</p><p><span class="math display">\[\int_L P(x,y)dx+Q(x,y)dy = \int_{\alpha}^{\beta} \{ P[\varphi (t), \psi (t)] \varphi &#39;(t) + Q[\varphi (t), \psi (t)] \psi &#39;(t) \} dt \]</span></p><h2 id="公式变形">公式变形</h2><p>根据题目给出的y=f(x)，化简成x=啥，代入公式，然后进一步积分</p><p><span class="math display">\[\int_L P(x,y)dx+Q(x,y)dy = \int_{a}^{b} \{ P[x, \psi (t)] + Q[x, \psi (t)] \psi &#39;(t) \} dx \]</span></p><h2 id="推广到空间曲线">推广到空间曲线</h2><p><span class="math display">\[\int_L P(x,y)dx+Q(x,y)dy+R(x,y)dz = \int_{\alpha}^{\beta} \{ P[\varphi (t), \psi (t), \omega (t)] \varphi &#39;(t) + Q[\varphi (t), \psi (t), \omega (t)] \psi &#39;(t) + R[\varphi (t), \psi (t), \omega (t)]\omega &#39;(t) \}dt\]</span></p><h1 id="格林公式">格林公式</h1><h2 id="使用条件">使用条件</h2><p>区域内都要可导，且图形为逆时针</p><h2 id="形式补充">形式（补充）</h2><h1 id="对面积的曲面积分第一类曲面积分">对面积的曲面积分（第一类曲面积分）</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对弧长的曲线积分第一类曲线积分&quot;&gt;对弧长的曲线积分（第一类曲线积分）&lt;/h1&gt;
&lt;h2 id=&quot;作用&quot;&gt;作用&lt;/h2&gt;
&lt;p&gt;求弧长&lt;/p&gt;
&lt;h2 id=&quot;计算方法&quot;&gt;计算方法&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="曲线积分与曲面积分" scheme="http://yoursite.com/tags/%E6%9B%B2%E7%BA%BF%E7%A7%AF%E5%88%86%E4%B8%8E%E6%9B%B2%E9%9D%A2%E7%A7%AF%E5%88%86/"/>
    
      <category term="高等数学" scheme="http://yoursite.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>多元函数微分法及其应用</title>
    <link href="http://yoursite.com/2020/05/11/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/05/11/多元函数微分法及其应用/</id>
    <published>2020-05-11T12:49:30.133Z</published>
    <updated>2020-05-11T13:49:53.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多元函数的基本概念">多元函数的基本概念</h1><h2 id="二重极限两种表达形式">二重极限（两种表达形式）</h2><p><span class="math display">\[\lim_{(x,y)\rightarrow (x_0,y_0)}f(x,y)=A\text{（面积）}\]</span></p><p><span class="math display">\[\lim_{P\rightarrow P_0}f(P)=A\text{（面积）}\]</span></p><h2 id="连续性">连续性</h2><p><span class="math display">\[\lim_{(x,y)\rightarrow (x_0,y_0)}f(x,y)=f(x_0,y_0)\]</span> 称函数<span class="math inline">\(f(x,y)\)</span>在点<span class="math inline">\(P_0(x_0,y_0)\)</span>连续</p><h1 id="微分">微分</h1><h2 id="偏导数">偏导数</h2><p>一个导数微分</p><h2 id="高阶偏导数">高阶偏导数</h2><p>微分再微分</p><h2 id="全微分">全微分</h2><p>偏导数微分相加</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多元函数的基本概念&quot;&gt;多元函数的基本概念&lt;/h1&gt;
&lt;h2 id=&quot;二重极限两种表达形式&quot;&gt;二重极限（两种表达形式）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[\lim_{(x,y)\rightarrow (x_0,y_0)}f
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="多元函数" scheme="http://yoursite.com/tags/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>向量代数与空间解析几何</title>
    <link href="http://yoursite.com/2020/04/20/%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/"/>
    <id>http://yoursite.com/2020/04/20/向量代数与空间解析几何/</id>
    <published>2020-04-20T13:21:19.322Z</published>
    <updated>2020-04-21T14:59:28.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本运算">基本运算</h1><h2 id="ab和ab的区别">a·b和a×b的区别</h2><p>坐标分别为(<span class="math inline">\(a_1\)</span>,<span class="math inline">\(a_2\)</span>,<span class="math inline">\(a_3\)</span>),(<span class="math inline">\(b_1\)</span>,<span class="math inline">\(b_2\)</span>,<span class="math inline">\(b_3\)</span>)</p><p><span class="math display">\[a·b=a_1*b_1+a_2*b_2+a_3*b_3\]</span></p><p>而a×b为行列式计算</p><h2 id="方向余弦和总和">方向余弦和总和</h2><p><span class="math display">\[\cos \alpha = \frac{\text{x或y或z}}{|r|}\]</span></p><p><span class="math display">\[\frac{r}{|r|}=e\]</span></p><h2 id="数量积">数量积</h2><p><span class="math display">\[a·b=|a||b|\cos \text{夹角}\]</span></p><h2 id="向量积包含特殊运算关系">向量积（包含特殊运算关系）</h2><p><span class="math display">\[|c|=|a||b|\sin \alpha\]</span></p><p><span class="math display">\[c=a×b\]</span></p><p><span class="math display">\[a×b=-b×a\]</span> ## 数量积和向量积区别 <span class="math display">\[a·b=0\rightarrow a⊥b\]</span></p><p><span class="math display">\[a×b=0\rightarrow a//b\]</span></p><h2 id="混合积也可以用于求体积">混合积（也可以用于求体积）</h2><p><span class="math display">\[[abc]=(a×b)·c=|a×b||c|\cos \alpha\]</span></p><p>相当于三个向量求行列式，求体积的话上面<span class="math inline">\(\cos \alpha\)</span>要加绝对值</p><h1 id="平面方程">平面方程</h1><h2 id="点法式方程">点法式方程</h2><p><span class="math inline">\(n·\vec{M_0M}\)</span>，其中n(a,b,c)为法向量的点，<span class="math inline">\(\vec{M_0M}=(x-x_0,y-y_0,z-z_0)\)</span>为平面向量</p><p><span class="math display">\[a(x-x_0)+b(y-y_0)+c(z-z_0)=0\]</span></p><h2 id="一般方程">一般方程</h2><p><span class="math display">\[ax+by+cz+d=0\]</span></p><p>a,b,c分别为0代表着方程与x,y,z平行，也代表着法向量(a,b,c)分别垂直于x,y,z轴</p><p>d=0时，表示通过原点</p><h2 id="截距式方程">截距式方程</h2><p><span class="math display">\[\frac{x}{a}+\frac{y}{b}+\frac{z}{c}=1 \quad d\neq 0\]</span></p><h2 id="平面夹角">平面夹角</h2><p>同1.3数量积，把<span class="math inline">\(\cos \alpha\)</span>化成来，代入法向量坐标计算</p><h1 id="空间直线">空间直线</h1><h2 id="一般方程-1">一般方程</h2><p>两个平面方程放一起，类似于解方程</p><h2 id="对称式方程点向式方程">对称式方程，点向式方程</h2><p>前提：<span class="math inline">\(s(n,m,p)\text{方向向量}//\vec{M_0M}(x-x_0,y-y_0,z-z_0)\)</span></p><p><span class="math display">\[\frac{x-x_0}{m}=\frac{y-y_0}{n}=\frac{z-z_0}{p}\]</span></p><h2 id="参数方程">参数方程</h2><p>同上，也即 <span class="math display">\[\frac{x-x_0}{m}=\frac{y-y_0}{n}=\frac{z-z_0}{p}=t\]</span> 将t左右化开</p><h2 id="直线夹角">直线夹角</h2><p>方向向量求<span class="math inline">\(\cos \alpha\)</span>，同1.3</p><p>垂直条件：直线夹角的<span class="math inline">\(\cos =0\)</span></p><p>平行条件：系数比例相等。线性相关？？</p><h2 id="直线与平面夹角">直线与平面夹角</h2><p>方向向量s(m,n,p)与法向量n(a,b,c)的<span class="math inline">\(\cos \alpha\)</span>的绝对值，也就是<span class="math inline">\(\sin \alpha\)</span></p><h2 id="平面束略过暂时不懂后面补充同济高数下册p35">平面束（略过暂时不懂后面补充，同济高数下册P35）</h2><h1 id="曲面方程暂时不补p37">曲面方程（暂时不补，P37）</h1><h1 id="其他">其他</h1><p>单位向量计算：<span class="math inline">\(e=\frac{l}{|l|}\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本运算&quot;&gt;基本运算&lt;/h1&gt;
&lt;h2 id=&quot;ab和ab的区别&quot;&gt;a·b和a×b的区别&lt;/h2&gt;
&lt;p&gt;坐标分别为(&lt;span class=&quot;math inline&quot;&gt;\(a_1\)&lt;/span&gt;,&lt;span class=&quot;math inline&quot;&gt;\(a_
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="向量代数与空间解析几何" scheme="http://yoursite.com/tags/%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/"/>
    
      <category term="线性代数" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>微分方程</title>
    <link href="http://yoursite.com/2020/04/08/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/04/08/微分方程/</id>
    <published>2020-04-08T09:54:42.371Z</published>
    <updated>2020-04-08T12:24:41.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可分离变量微分方程">可分离变量微分方程</h1><p><span class="math inline">\(\frac{dy}{dx}=\frac{y}{x}\)</span>化成<span class="math inline">\(\frac{dy}{y}=\frac{dx}{x}\)</span>，也就是y一边，x化一边，再积分</p><h1 id="齐次方程">齐次方程</h1><p><span class="math inline">\(\frac{dy}{dx}\)</span>等号右边可以化成关于<span class="math inline">\(\frac{y}{x}\)</span>的函数，就是齐次方程</p><h1 id="一阶线性方程">一阶线性方程</h1><h2 id="线性方程">线性方程</h2><h3 id="形式">形式</h3><p><span class="math display">\[\frac{dy}{dx}+P(x)y=Q(x)\]</span></p><h3 id="情况">情况</h3><p>Q(x)为0则为齐次，否则为非齐次</p><h3 id="通解形式">通解形式</h3><p><span class="math display">\[y=e^{-\int P(x)dx}\left( \int Q(x)e^{\int P(x)dx}dx+C \right)\]</span></p><h2 id="伯努利方程">伯努利方程</h2><h3 id="形式与线性方程略有不同">形式（与线性方程略有不同）</h3><p><span class="math display">\[\frac{dy}{dx}+P(x)y=Q(x)y^n\]</span></p><h3 id="通解形式-1">通解形式</h3><p>方法：</p><p>1.y^n往等号左边移动，变<span class="math inline">\(\frac{dy}{dx}y^{-n}+P(x)y^{1-n}=Q(x)\)</span></p><p>2.令<span class="math inline">\(z=y^{1-n}\)</span>，求导代回1中的方程，得到<span class="math inline">\(\frac{dz}{dx}+(1-n)P(x)z=(1-n)Q(x)\)</span></p><p>3.用线性方程通解形式求解，然后再把2中的z代回求解后的方程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;可分离变量微分方程&quot;&gt;可分离变量微分方程&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(\frac{dy}{dx}=\frac{y}{x}\)&lt;/span&gt;化成&lt;span class=&quot;math inline&quot;&gt;\(\frac{dy}{
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="微分方程" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>不定积分与定积分</title>
    <link href="http://yoursite.com/2020/03/10/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86%E4%B8%8E%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    <id>http://yoursite.com/2020/03/10/不定积分与定积分/</id>
    <published>2020-03-10T06:09:08.323Z</published>
    <updated>2020-05-14T07:53:47.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="不定积分公式必记">不定积分公式（必记）</h1><p>1.<span class="math display">\[\int kdx=kx+C\]</span></p><p>2.<span class="math display">\[\int x^{\mu}dx=\frac{x^{\mu+1}}{\mu+1}+C\]</span></p><p>3.<span class="math display">\[\int \frac{dx}{x}=ln|x|+C\]</span></p><p>4.<span class="math display">\[\int \frac{dx}{1+x^2}=\arctan x+C\]</span></p><p>5.<span class="math display">\[\int \frac{dx}{\sqrt{1+x^2}}=\arcsin x+C\]</span></p><p>6.<span class="math display">\[\int \cos xdx=\sin x+C\]</span></p><p>7.<span class="math display">\[\int \sin xdx=-\cos x+C\]</span></p><p>8.<span class="math display">\[\int \frac{dx}{\cos^2x}=\int \sec^2xdx=\tan x+C\]</span></p><p>9.<span class="math display">\[\int \frac{dx}{\sin^2x}=\int \csc^2xdx=-\cot x+C\]</span></p><p>10.<span class="math display">\[\int \sec x\tan xdx=\sec x+C\]</span></p><p>11.<span class="math display">\[\int \csc x\cot xdx=-\csc x+C\]</span></p><p>12.<span class="math display">\[\int e^xdx=e^x+C\]</span></p><p>13.<span class="math display">\[\int a^xdx=\frac{a^x}{\ln a}\]</span></p><p>14.<span class="math display">\[\int \text{sh} xdx=\text{ch} x+C\]</span></p><p>15.<span class="math display">\[\int \text{ch} xdx=\text{sh} x+C\]</span></p><p>16.<span class="math display">\[\int \tan xdx=-\ln|\cos x|+C\]</span></p><p>17.<span class="math display">\[\int \cot xdx=\ln|\sin x|+C\]</span></p><p>18.<span class="math display">\[\int \sec xdx=\ln|\sec x+\tan x|+C\]</span></p><p>19.<span class="math display">\[\int \csc xdx=\ln|\csc x-\cot x|+C\]</span></p><p>20.<span class="math display">\[\int \frac{dx}{a^2+x^2}=\frac{1}{a}\arctan \frac{x}{a}+C\]</span></p><p>21.<span class="math display">\[\int \frac{dx}{x^2-a^2}=\frac{1}{2a}\ln \left\lvert\frac{x-a}{x+a}\right\rvert+C\]</span></p><p>22.<span class="math display">\[\int \frac{dx}{\sqrt{a^2-x^2}}=\arcsin \frac{x}{a}+C\]</span></p><p>23.<span class="math display">\[\int \frac{dx}{\sqrt{x^2+a^2}}=\ln(x+\sqrt{x^2+a^2})+C\]</span></p><p>24.<span class="math display">\[\int \frac{dx}{\sqrt{x^2-a^2}}=\ln \left\lvert x+\sqrt{x^2-a^2}\right\rvert+C\]</span></p><h1 id="反三角函数转化">反三角函数转化</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;%E5%8F%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0&#x2F;7004029?fr&#x3D;aladdin</span><br></pre></td></tr></table></figure><h1 id="常用三角函数公式">常用三角函数公式</h1><h2 id="tan-fracx2推广"><span class="math inline">\(\tan \frac{x}{2}\)</span>推广</h2><p><span class="math display">\[\sin x=2\sin \frac{x}{2}\cos\frac{x}{2}=\frac{2\tan\frac{x}{2}}{\sec^2\frac{x}{2}}=\frac{2\tan\frac{x}{2}}{1+\tan^2\frac{x}{2}}\]</span></p><p><span class="math display">\[\cos x=\cos^2\frac{x}{2}-\sin^2\frac{x}{2}=\frac{1-\tan^2\frac{x}{2}}{\sec^2\frac{x}{2}}=\frac{1-\tan^2\frac{x}{2}}{1+\tan^2\frac{x}{2}}\]</span></p><h2 id="半角公式推广">半角公式推广</h2><p><span class="math display">\[\cos^2x=\frac{1+\cos 2x}{2}\]</span> <span class="math display">\[\sin^2x=\frac{1-\cos 2x}{2}\]</span></p><h1 id="定积分重要">定积分（重要）</h1><h2 id="基本公式">基本公式</h2><h3 id="积分上限及其导数公式">积分上限及其导数公式</h3><p><span class="math display">\[\Phi(x)=\int_a^xf(t)dt \rightarrow \Phi&#39;(x)=\frac{d}{dx}\int^x_af(t)dt=f(x),(a\leqslant x\leqslant b)\]</span></p><h3 id="牛顿-莱布尼兹公式">牛顿-莱布尼兹公式</h3><p><span class="math display">\[\int ^b_af(x)dx=F(b)-F(a)=[F(x)]^b_a\]</span></p><h3 id="积分中值定理">积分中值定理</h3><p><span class="math display">\[\int^b_af(x)dx=F(b)-F(a)=f(\zeta)(b-a),\zeta\in(a,b)\]</span></p><h2 id="奇偶函数积分计算公式">奇偶函数积分计算公式</h2><p>1.f(x)在[-a,a]上连续且为偶函数</p><p><span class="math display">\[\int^a_{-a}f(x)dx=2\int^a_0f(x)dx\]</span></p><p>2.f(x)在[-a,a]上连续且为奇数函数</p><p><span class="math display">\[\int^a_{-a}f(x)dx=0\]</span></p><h2 id="有周期定积分公式">有周期定积分公式</h2><h3 id="fx在01上连续">f(x)在[0,1]上连续</h3><p><span class="math display">\[\int^{\frac{\pi}{2}}_0f(\sin x)dx=\int^{\frac{\pi}{2}}_0f(\cos x)dx\]</span></p><p><span class="math display">\[\int^{\pi}_0f(x\sin x)dx=\frac{\pi}{2}\int^{\pi}_0f(\sin x)dx\]</span></p><h3 id="fx周期为t">f(x)周期为T</h3><p><span class="math display">\[\int^{a+T}_af(x)dx=\int^T_0f(x)dx\]</span></p><p><span class="math display">\[\int^{a+nT}_af(x)dx=n\int^T_0f(x)dx\]</span></p><h2 id="关于sin-x-cos-x定积分公式">关于<span class="math inline">\(\sin x \cos x\)</span>定积分公式</h2><p>1.<span class="math display">\[\int^{\frac{\pi}{2}}_0f(\sin x)dx=\int^{\frac{\pi}{2}}_0f(\cos x)dx\]</span></p><p>2.<span class="math display">\[\int^{\pi}_0xf(\sin x)dx=\frac{\pi}{2}\int^{\pi}_0f(\sin x)dx\]</span></p><p>3.<span class="math display">\[I_n=\int^{\frac{\pi}{2}}_0\sin^nxdx=\int^{\frac{\pi}{2}}_0\cos^nxdx=\begin{cases}\frac{n-1}{n}*\frac{n-3}{n-2}*...*\frac{3}{4}*\frac{1}{2}*\frac{\pi}{2}, \text{n为正偶数} \\\frac{n-1}{n}*\frac{n-3}{n-2}*...*\frac{4}{5}*\frac{2}{3}, \text{n为正奇数}\end{cases}\]</span></p><h2 id="换元公式重要计算公式">换元公式（重要计算公式）</h2><p><span class="math display">\[\int_{\alpha}^{\beta}f(x)=\int_{\alpha}^{\beta}f[g(t)]g&#39;(t)dt\]</span></p><h1 id="反常积分">反常积分</h1><h2 id="无界函数反常积分">无界函数反常积分</h2><p>f(x)中当x逼近a时函数没有极值，点a则为瑕点，这个函数的反常积分则叫瑕积分</p><h2 id="判断反常积分收敛方法">判断反常积分收敛方法</h2><p>求瑕点(就是不存在值的点)，然后化简后洛洛洛必达就ok</p><h2 id="gamma函数"><span class="math inline">\(\Gamma\)</span>函数</h2><h3 id="定义">定义</h3><p><span class="math inline">\(\Gamma(s)=\int^{+∞}_0e^{-x}x^{s-1}dx\quad (s&gt;0)\)</span></p><h3 id="相关公式">相关公式</h3><p>1.递推公式</p><p><span class="math display">\[\Gamma(s+1)=s\Gamma(s)\]</span></p><p>对于正整数<span class="math inline">\(\Gamma(s+1)=n!\)</span></p><p>2.当<span class="math inline">\(s\rightarrow 0^+\)</span>时，<span class="math inline">\(\Gamma(s)\rightarrow +∞\)</span></p><p>3.<span class="math inline">\(\Gamma(s) \Gamma(1-s)=\frac{\pi}{\sin \pi s}\;(0&lt;s&lt;1)\)</span></p><p>4.在<span class="math inline">\(\Gamma(s)=\int^{+∞}_0e^{-x}x^{s-1}dx\)</span>中，令<span class="math inline">\(x=u^2\quad \rightarrow \quad \Gamma(s)=2\int^{+∞}_0e^{-u^2}u^{s-1} du\)</span></p><p>4见高数上册P269</p><h1 id="定积分应用多练">定积分应用（多练）</h1><h2 id="算平面面积">算平面面积</h2><h3 id="算极坐标面积公式">算极坐标面积公式</h3><p><span class="math display">\[A=\int^{\beta}_{\alpha}\frac{1}{2}[\rho (\theta)]^2d\theta\]</span></p><h2 id="算体积">算体积</h2><h3 id="未知平面面积">未知平面面积</h3><p><span class="math display">\[V=\int^{b}_{a} \pi[f(x)]^2dx\]</span></p><h3 id="已知平面面积">已知平面面积</h3><p><span class="math display">\[V=\int^{b}_{a}A(x)dx\]</span></p><h3 id="平面图形绕y轴的体积公式">平面图形绕y轴的体积公式</h3><p><span class="math display">\[V=2\pi \int^b_axf(x)dx\]</span></p><h2 id="求弧长">求弧长</h2><p><span class="math display">\[s=\int^{\beta}_{\alpha}\sqrt{y&#39;^2+x&#39;^2}dt \quad \text{y和x都是函数来的，如参数方程之类}\]</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;不定积分公式必记&quot;&gt;不定积分公式（必记）&lt;/h1&gt;
&lt;p&gt;1.&lt;span class=&quot;math display&quot;&gt;\[\int kdx=kx+C\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;span class=&quot;math display&quot;&gt;\[\int x^{\
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="不定积分" scheme="http://yoursite.com/tags/%E4%B8%8D%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    
      <category term="定积分" scheme="http://yoursite.com/tags/%E5%AE%9A%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>微分中值定理与导数的应用</title>
    <link href="http://yoursite.com/2020/02/29/%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2020/02/29/微分中值定理与导数的应用/</id>
    <published>2020-02-29T14:43:29.786Z</published>
    <updated>2020-02-29T14:43:29.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微分中值定理使用要求在这里">微分中值定理（使用要求在这里）</h1><p>使用要求：</p><p>(1)在闭区间[a, b]上连续</p><p>(2)在开区间(a, b)内可导</p><h2 id="罗尔定理拉格朗日中值定理">罗尔定理、拉格朗日中值定理</h2><p>罗尔定理为拉格朗日中值定理的特殊情形</p><h3 id="拉格朗日中值定理">拉格朗日中值定理</h3><p>在使用要求的前提下，有函数f(x)</p><p>可得<span class="math inline">\((a, b)\)</span>内至少有一点<span class="math inline">\(\xi(a&lt;\xi&lt;b)\)</span>，使<span class="math inline">\(f(b)-f(a)=f&#39;(\xi)(b-a)\)</span></p><h3 id="罗尔定理">罗尔定理</h3><p>在上面拉格朗日中值定理要求基础上添加一条<span class="math inline">\(f(a)=f(b)\)</span>的要求</p><p>则<span class="math inline">\((a, b)\)</span>内至少有一点<span class="math inline">\(\xi(a&lt;\xi&lt;b)\)</span>，使<span class="math inline">\(f&#39;(\xi)=0\)</span></p><h2 id="柯西中值定理">柯西中值定理</h2><p>在使用要求的前提下，分别有两个函数<span class="math inline">\(f(x)\)</span>和<span class="math inline">\(F(x)\)</span></p><p>添加一个要求：任一<span class="math inline">\(x\in(a, b)\)</span>，使<span class="math inline">\(F&#39;(x)\not=0\)</span></p><p>则<span class="math inline">\((a, b)\)</span>内至少有一点<span class="math inline">\(\xi(a&lt;\xi&lt;b)\)</span>，使<span class="math inline">\(\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f&#39;(\xi)}{F&#39;(\xi)}\)</span></p><h1 id="洛必达法则">洛必达法则</h1><h2 id="定理一">定理一</h2><p>(1)当<span class="math inline">\(x\rightarrow a\)</span>时，函数<span class="math inline">\(f(x)\approx 0 \text{&amp;} F(x)\approx 0\)</span>(趋近于0)</p><p>(2)在点a的某去心领域内，f'(x)及F'(x)都存在且<span class="math inline">\(F&#39;(x)\not= 0\)</span></p><p>(3)<span class="math inline">\(\displaystyle\lim_{x\rightarrow a}\frac{f&#39;(x)}{F&#39;(x)}\)</span>存在(或为无穷大)</p><p>则<span class="math inline">\(\displaystyle\lim_{x\rightarrow a}\frac{f(x)}{F(x)} = \lim_{x\rightarrow a}\frac{f&#39;(x)}{F&#39;(x)}\)</span></p><h2 id="定理二">定理二</h2><p>(1)当<span class="math inline">\(x\rightarrow \infty\)</span>时，函数<span class="math inline">\(f(x)\approx 0 \text{&amp;} F(x)\approx 0\)</span>(趋近于0)</p><p>(2)当<span class="math inline">\(|x|&gt;N\)</span>时<span class="math inline">\(f&#39;(x)\)</span>与<span class="math inline">\(F&#39;(x)\)</span>都存在，且<span class="math inline">\(F&#39;(x)\not= 0\)</span></p><p>(3)<span class="math inline">\(\displaystyle\lim_{x\rightarrow \infty}\frac{f&#39;(x)}{F&#39;(x)}\)</span>存在(或为无穷大)</p><p>则<span class="math inline">\(\displaystyle\lim_{x\rightarrow \infty}\frac{f(x)}{F(x)} = \lim_{x\rightarrow a}\frac{f&#39;(x)}{F&#39;(x)}\)</span></p><h1 id="泰勒公式">泰勒公式</h1><h2 id="公式原型">公式原型</h2><p><span class="math display">\[f(x)=f(x_0)+\frac{f^{(1)}(x_0)}{1!}(x-x_0)+\frac{f^{(2)}(x_0)}{2!}(x-x_0)^{2}+...+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^{n}+R_n(x)\]</span></p><p>当存在n阶导数时，<span class="math inline">\(R_n(x)\)</span>为佩亚诺余项。当存在(n+1)阶导数时，<span class="math inline">\(R_n(x)\)</span>为拉格朗日余项</p><h2 id="各个余项式子">各个余项式子</h2><h3 id="佩亚诺余项">佩亚诺余项</h3><p><span class="math display">\[R_n(x)=o((x-x_0)^n)\]</span></p><h3 id="拉格朗日余项">拉格朗日余项</h3><p><span class="math display">\[R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}\]</span> 其中<span class="math inline">\(\xi\)</span>的值在<span class="math inline">\(x_0\)</span>和x之间</p><h2 id="r_nx估计式"><span class="math inline">\(R_n(x)\)</span>估计式</h2><p><span class="math display">\[|R_n(x)|=\begin{vmatrix}\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}\end{vmatrix}\leq \frac{M}{(n+1)!}|x-x_0|^{(n+1)}\]</span> 当<span class="math inline">\(\xi=0\)</span>时=号成立</p><h2 id="麦克劳林公式">麦克劳林公式</h2><p>在泰勒公式中取<span class="math inline">\(x_0=0\)</span>即为麦克劳林公式，也即 <span class="math display">\[f(x)=f(0)+\frac{f^{(1)}(0)}{1!}x+\frac{f^{(2)}(0)}{2!}x^{2}+...+\frac{f^{(n)}(0)}{n!}x^{n}+R_n(x)\]</span></p><h2 id="泰勒公式在初等函数均使用麦克劳林公式所求">泰勒公式在初等函数（均使用麦克劳林公式所求）</h2><p><span class="math display">\[e^x=1+x+\frac{x^2}{2!}+...+\frac{x^n}{n!}+R_n(x)\]</span> <span class="math display">\[\sin x = x-\frac{x^3}{3!}+\frac{x^5}{5!}-...+(-1)^{m-1}\frac{x^{2m-1}}{(2m-1)!}+R_{2m}(x)\]</span> <span class="math display">\[\cos x=1-\frac{1}{2!}x^2+\frac{1}{4!}x^4-...+(-1)^m\frac{1}{(2m)!}x^{2m}+R_{2m+1}(x)\]</span> <span class="math display">\[\ln(1+x)=x-\frac{1}{2}x^2+\frac{1}{3}x^3-...+(-1)^{n-1}\frac{1}{n}x^n+R_n(x)\]</span> <span class="math display">\[(1+x)^\alpha=1+\alpha x+\frac{\alpha(\alpha-1)}{2!}x^2+...+\frac{\alpha(\alpha-1)...(\alpha-n+1)}{n!}x^n+R_n(x)\]</span></p><h2 id="由泰勒公式推导出来的等价无穷小公式">由泰勒公式推导出来的等价无穷小公式</h2><p>https://baike.baidu.com/item/%E7%AD%89%E4%BB%B7%E6%97%A0%E7%A9%B7%E5%B0%8F/7796020?fr=aladdin#3</p><h1 id="曲线的凹凸性与拐点">曲线的凹凸性与拐点</h1><h2 id="凹凸性">凹凸性</h2><p>一个函数，有任意两点a, b</p><p>如果<span class="math inline">\(f(\frac{a+b}{2})&gt;\frac{f(a)+f(b)}{2}\)</span>，为凹弧(<span class="math inline">\(f&#39;&#39;(x) &gt; 0\)</span>)；反之，则为凸弧(<span class="math inline">\(f&#39;&#39;(x) &lt; 0\)</span>)</p><h2 id="拐点">拐点</h2><p>f'(x)的单调增减区间发生变化的分界点就是拐点(也即求<span class="math inline">\(f&#39;&#39;(x)=0\)</span>，并且<span class="math inline">\(f&#39;&#39;(x)\)</span>两侧异号)</p><h1 id="函数极大值极小值">函数极大值极小值</h1><h2 id="极大小值">极大（小）值</h2><p>即<span class="math inline">\(f&#39;(x)=0\)</span>但<span class="math inline">\(f&#39;(x)\)</span>两侧均&gt;0(或&lt;0)为极小值(极大值)点</p><p>但极小值(极大值)不一定为最小值(最大值)。需再求两侧端点的值，或证明该点是该区间的唯一解(也就是f'(x)=0的唯一解)，才能得出是最大值或最小值</p><h2 id="简易求极大值极小值">简易求极大值极小值</h2><p><span class="math inline">\(f&#39;(x)=0\)</span>且<span class="math inline">\(f&#39;&#39;(x)&gt;0\)</span>，为极小值(凹弧)</p><p><span class="math inline">\(f&#39;(x)=0\)</span>且<span class="math inline">\(f&#39;&#39;(x)&lt;0\)</span>，为极大值(凸弧)</p><p>注意：在<span class="math inline">\(f&#39;&#39;(x)=0\)</span>时无法使用</p><h1 id="曲率重要">曲率（重要）</h1><p>应用：研究曲线的弯曲程度</p><h2 id="弧微分公式">弧微分公式</h2><p><span class="math display">\[ds=\sqrt{1+y&#39;^2}dx\]</span></p><p>其中ds为弧线的增量，也就是类似于平常函数中的<span class="math inline">\(\Delta y\)</span></p><h2 id="曲率公式">曲率公式</h2><h3 id="形式1">形式1</h3><p><span class="math display">\[K=\frac{|y&#39;&#39;|}{(1+y&#39;^2)^{3/2}}\]</span></p><h3 id="形式2">形式2</h3><p><span class="math display">\[\begin{cases}x=\varphi (t)\\y=\psi (t)\end{cases}\]</span> <span class="math display">\[K=\frac{|\varphi &#39;(t)\psi &#39;&#39;(t)-\varphi &#39;&#39;(t)\psi &#39;(t)|}{[\varphi &#39;^2(t)+\psi &#39;^2(t)]^{\frac{3}{2}}}\]</span></p><h2 id="曲率圆">曲率圆</h2><h3 id="曲率圆半径">曲率圆半径</h3><p><span class="math display">\[\rho=\frac{1}{K}\]</span></p><h3 id="曲率中心点dalphabeta">曲率中心点<span class="math inline">\(D(\alpha,\beta)\)</span></h3><p><span class="math display">\[\begin{cases}\alpha = x-\frac{y&#39;(1+y&#39;^2)}{y&#39;&#39;}\\\beta = y+\frac{1+y&#39;^2}{y&#39;&#39;}\end{cases}\]</span></p><h3 id="曲率圆方程">曲率圆方程</h3><p><span class="math display">\[(x-\alpha)^2+(y-\beta)^2=\rho^2\]</span></p><h3 id="渐屈线方程未完善">渐屈线方程（未完善）</h3><p>曲率中心点的<span class="math inline">\(\alpha\)</span>和<span class="math inline">\(\beta\)</span>即为相关参数方程</p><h1 id="方程近似解">方程近似解</h1><h2 id="二分法">二分法</h2><p>类似于计算机的二分查找，不断查询中间值，直到找到近似解</p><h2 id="切线法牛顿迭代法">切线法（牛顿迭代法）</h2><p>求出斜率k，也就是函数f(x)的导数，然后通过直线方程<span class="math inline">\((y-y_0)=f&#39;(x_0)(x-x_0)\)</span>求近似值，其中<span class="math inline">\(y=0\)</span></p><p>也即<span class="math inline">\(x_1=x_0-\frac{f(x_0)}{f&#39;(x_0)}\)</span></p><p>不断迭代求<span class="math inline">\(x_n\)</span></p><h2 id="割线法">割线法</h2><p>切线法的改进版</p><p>直接算两点的直线方程，然后通过直线方程<span class="math inline">\((y-y_0)=\frac{x_1-x_0}{f(x_1)-f(x_0)}(x-x_0)\)</span>求近似值</p><p>也就是将<span class="math inline">\(f&#39;(x_0)\)</span>替换成<span class="math inline">\(\frac{x_1-x_0}{f(x_1)-f(x_0)}\)</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微分中值定理使用要求在这里&quot;&gt;微分中值定理（使用要求在这里）&lt;/h1&gt;
&lt;p&gt;使用要求：&lt;/p&gt;
&lt;p&gt;(1)在闭区间[a, b]上连续&lt;/p&gt;
&lt;p&gt;(2)在开区间(a, b)内可导&lt;/p&gt;
&lt;h2 id=&quot;罗尔定理拉格朗日中值定理&quot;&gt;罗尔定理、拉格朗日
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="微分中值定理与导数的应用" scheme="http://yoursite.com/tags/%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>导数与微分</title>
    <link href="http://yoursite.com/2020/02/29/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"/>
    <id>http://yoursite.com/2020/02/29/导数与微分/</id>
    <published>2020-02-29T09:15:13.884Z</published>
    <updated>2020-04-01T09:23:02.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高中三角函数公式重要">高中三角函数公式（重要）</h1><h2 id="反三角函数理清关系">反三角函数（理清关系）</h2><p><span class="math display">\[y=\arcsin x\ \ \text{也即}\sin y=x\]</span></p><h3 id="相关公式">相关公式</h3><p><span class="math display">\[\arcsin(-x)=-\arcsin x\]</span> <span class="math display">\[\arccos(-x)=\pi -\arccos x\]</span> <span class="math display">\[\arctan(-x)=-\arctan x\]</span> <span class="math display">\[\arcsin x+\arccos x=\frac{\pi}{2}=\arctan x+\text{arccot} x\]</span></p><h2 id="三角函数">三角函数</h2><p>在直角三角形中<span class="math inline">\(\Theta\)</span>为b和c的夹角，如下图 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;|</span><br><span class="line">c&#x2F; |a</span><br><span class="line">&#x2F;__|</span><br><span class="line">  b</span><br></pre></td></tr></table></figure></p><p><span class="math display">\[\tan x=\frac{\sin x}{\cos x}=\frac{\sec x}{\csc x}\]</span></p><h3 id="余割">余割</h3><p><span class="math display">\[\csc x=\frac{1}{\sin x}\]</span> <span class="math display">\[\csc \Theta=\frac{c}{a}\]</span></p><h3 id="正割">正割</h3><p><span class="math display">\[\sec x=\frac{1}{\cos x}\]</span> <span class="math display">\[\sec \Theta=\frac{c}{b}\]</span></p><h3 id="余切">余切</h3><p><span class="math display">\[\cot x=\frac{\cos x}{\sin x}\]</span> <span class="math display">\[\cot \Theta=\frac{b}{a}\]</span></p><h3 id="其他相关公式">其他相关公式</h3><p><span class="math display">\[\csc x-\cot x=\tan\frac{x}{2}\]</span> <span class="math display">\[\tan ^2x+1=\sec^2x\]</span></p><h1 id="求导">求导</h1><h2 id="求导公式重要">求导公式（重要）</h2><h3 id="常数">常数</h3><p><span class="math display">\[(C)&#39;=0\]</span></p><h3 id="幂函数">幂函数</h3><p><span class="math display">\[(x^{u})&#39;=\mu x^{\mu-1}\]</span></p><h3 id="三角函数-1">三角函数</h3><p><span class="math display">\[正弦：(\sin x)&#39;=\cos x\]</span> <span class="math display">\[余弦：(\cos x)&#39;=-\sin x\]</span> <span class="math display">\[正切：(\tan x)&#39;=\sec ^2 x\]</span> <span class="math display">\[余割：(\csc x)&#39;=-\csc x\cot x\]</span> <span class="math display">\[正割：(\sec x)&#39;=\sec x\tan x\]</span> <span class="math display">\[余切：(\cot x)&#39;=-\csc ^2 x\]</span> <span class="math display">\[反正弦：(\arcsin x)&#39;=\frac{1}{\sqrt{1-x^2}}\]</span> <span class="math display">\[反余弦：(\arccos x)&#39;=-\frac{1}{\sqrt{1-x^2}}\]</span> <span class="math display">\[反正切：(\arctan x)&#39;=\frac{1}{1+x^2}\]</span> <span class="math display">\[反余切：(\text{arccot}\ x)&#39;=-\frac{1}{1+x^2}\]</span></p><h3 id="指数函数">指数函数</h3><p><span class="math display">\[(a^{x})&#39;=a^{x}\ln a(a&gt;0,a\not=1)\]</span> <span class="math display">\[\text{特殊：}(e^{x})&#39;=e^x\]</span></p><h3 id="对数函数">对数函数</h3><p><span class="math display">\[(\log_{a}{x})&#39;=\frac{1}{x\ln a}(a&gt;0,a\not=1)\]</span> <span class="math display">\[\text{特殊：a=e时}\ (\ln x)&#39;=\frac{1}{x}\]</span></p><h3 id="双曲函数">双曲函数</h3><p><span class="math display">\[(sh x)&#39;=ch x\]</span> <span class="math display">\[(ch x)&#39;=sh x\]</span> <span class="math display">\[(th x)&#39;=\frac{1}{ch^2x}\]</span> <span class="math display">\[(arsh x)&#39;=\frac{1}{\sqrt{1+x^2}}\]</span> <span class="math display">\[(arch x)&#39;=\frac{1}{\sqrt{x^2-1}}\]</span> <span class="math display">\[(arth x)&#39;=\frac{1}{\sqrt{1-x^2}}\]</span></p><h2 id="导数的切线方程以及法线方程">导数的切线方程以及法线方程</h2><p>其中<span class="math inline">\((x_0, y_0)\)</span>为坐标点</p><p>切线方程 <span class="math inline">\(y-y_{0}=f&#39;(x_{0})(x-x_{0})\)</span></p><p>法线方程 <span class="math inline">\(y-y_{0}=-\frac{1}{f&#39;(x_{0})}(x-x_{0})\)</span></p><h2 id="求导法则重要">求导法则（重要）</h2><h3 id="和差">和&amp;差</h3><p><span class="math display">\[[u(x)\pm v(x)]&#39;=u&#39;(x)\pm v&#39;(x)\]</span></p><h3 id="积">积</h3><p><span class="math display">\[[u(x)*v(x)]&#39;=u&#39;(x)*v(x)+u(x)*v&#39;(x)\]</span></p><h3 id="商">商</h3><p><span class="math display">\[\left(\frac{u(x)}{v(x)}\right)&#39;=\frac{u&#39;(x)*v(x)-u(x)*v&#39;(x)}{v^2(x)}\]</span></p><h1 id="高阶导数">高阶导数</h1><p>n阶导数一般这样子记 <span class="math display">\[\frac{d^{n}y}{dx^{n}}\]</span></p><h2 id="高阶导数公式重要">高阶导数公式（重要）</h2><h3 id="指数函数-1">指数函数</h3><p><span class="math display">\[(e^x)^{(n)}=e^x\]</span></p><h3 id="正弦余弦">正弦余弦</h3><p><span class="math display">\[(\sin x)^{(n)}=\sin (x+n*\frac{\Pi}{2})\]</span></p><p><span class="math display">\[(\cos x)^{(n)}=\cos (x+n*\frac{\Pi}{2})\]</span></p><h3 id="对数函数-1">对数函数</h3><p><span class="math display">\[[\ln (1+x)]^{(n)}=(-1)^{n-1}\frac{(n-1)!}{(1+x)^n}\]</span></p><h3 id="幂函数-1">幂函数</h3><p><span class="math display">\[(x^\mu)^{(n)}=\begin{cases}\mu(\mu-1)(\mu-2)...(\mu -n+1)x^{\mu -n}   &amp; n&lt;\mu \\n!  &amp; n=\mu \\0  &amp; n&gt;\mu\end{cases}\]</span></p><h3 id="莱布尼兹公式类杨辉三角uvn">莱布尼兹公式（类杨辉三角）<span class="math inline">\((uv)^{(n)}\)</span></h3><p><span class="math display">\[(uv)^{(n)}=\sum_{k=0}^{n}C_n^k u^{(n-k)} v^{(k)}\]</span></p><h1 id="隐函数求导注意事项">隐函数求导注意事项</h1><h2 id="隐函数一阶导数">隐函数一阶导数</h2><p><span class="math display">\[\frac{\frac{dy}{dt}}{\frac{dx}{dt}}\text{相当于上面对y求导，然后下面是对x求导}\]</span></p><h2 id="隐函数二阶导数">隐函数二阶导数</h2><p><span class="math display">\[\frac{d^2y}{dx^2}=\frac{d\frac{\frac{\frac{dy}{dt}}{\frac{dx}{dt}}}{dt}}{\frac{dx}{dt}}=\frac{d\frac{\frac{dy}{dt}}{\frac{dx}{dt}}}{dt}*\frac{dt}{dx}\]</span></p><p>以此类推隐函数n阶导数</p><h1 id="微分">微分</h1><p>微分(dy)就是在原函数上求导得到<span class="math inline">\(\frac{dy}{dx}\)</span>，然后将dx挪至等式右边</p><p>微分作用就是可以求函数在变化很小的情况下（例如<span class="math inline">\(\Delta x=0.000000001\)</span>）函数的近似值</p><p>例如：</p><p><span class="math display">\[dy=(\sin x)&#39;dx\]</span></p><h1 id="其他杂七杂八公式">其他杂七杂八公式</h1><h2 id="扇形公式">扇形公式</h2><p>面积公式：</p><p><span class="math display">\[S=\frac{LR}{2}=\frac{n\Pi R^2}{360}\text{（其中n为角度，非弧度）}\]</span></p><p>弧长公式：</p><p><span class="math display">\[L=R\alpha\]</span></p><h2 id="对数换底对数求导法要用到">对数换底（对数求导法要用到）</h2><p><span class="math display">\[y=x^{\sin x}\Rightarrow \ln y=ln x^{\sin x}\Rightarrow \ln y = \sin x \ln x\]</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高中三角函数公式重要&quot;&gt;高中三角函数公式（重要）&lt;/h1&gt;
&lt;h2 id=&quot;反三角函数理清关系&quot;&gt;反三角函数（理清关系）&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math display&quot;&gt;\[y=\arcsin x\ \ \text{也即}\sin y=x
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="导数与微分" scheme="http://yoursite.com/tags/%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86/"/>
    
      <category term="三角函数" scheme="http://yoursite.com/tags/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>函数与极限</title>
    <link href="http://yoursite.com/2020/01/06/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/"/>
    <id>http://yoursite.com/2020/01/06/函数与极限/</id>
    <published>2020-01-06T05:45:38.543Z</published>
    <updated>2020-07-24T08:20:58.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数">函数</h1><h2 id="绝对值函数">绝对值函数</h2><p><span class="math inline">\(y = |x|\)</span></p><p>值部分（python伪代码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if x &lt; 0</span><br><span class="line">    y &#x3D; -1</span><br><span class="line"></span><br><span class="line">elif x &#x3D;&#x3D; 0</span><br><span class="line">    y &#x3D; 0</span><br><span class="line"></span><br><span class="line">else x &gt; 0</span><br><span class="line">    y &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="取整函数向下取整">取整函数（向下取整）</h2><p>表现形式：<span class="math inline">\(\sqrt{2}=1\)</span></p><p>就如这么表示：<span class="math inline">\([x]\)</span></p><h2 id="分段函数">分段函数</h2><p>值部分分别表示就算分段函数</p><h2 id="复合函数">复合函数</h2><p><span class="math inline">\((f∘g)(x) = f[g(x)]\)</span></p><h1 id="双曲函数">双曲函数</h1><p>双曲正弦：<span class="math inline">\(sh x = \frac{e^{x} - e^{-x}}{2}\)</span></p><p>双曲余弦：<span class="math inline">\(ch x = \frac{e^{x} + e^{-x}}{2}\)</span></p><p>双曲正切：<span class="math inline">\(th x = \frac{sh x}{ch x} = \frac{e^{x} - e^{-x}}{e^{x} + e^{-x}}\)</span></p><p>反双曲正弦： <span class="math inline">\(arsh x = ln(x + \sqrt{x^2 + 1})\)</span></p><p>反双曲余弦： <span class="math inline">\(arch x = ln(x + \sqrt{x^2 - 1})\)</span></p><p>反双曲正切： <span class="math inline">\(arth x = \frac{1}{2} * ln \frac{1 + x}{1 - x}\)</span></p><h1 id="两个重要极限重要">两个重要极限（重要！）</h1><ol type="1"><li><p><span class="math inline">\(\lim_{n \to 0} \ \frac{\sin x}{x}=1\)</span></p></li><li><p><span class="math inline">\(\lim_{n \to \infty} (1+\frac{1}{x})^{x} = e\)</span></p></li></ol><h1 id="泰勒公式推导出来的等阶无穷小一定要记">泰勒公式推导出来的等阶无穷小（一定要记）</h1><p>前提：当<span class="math inline">\(x\rightarrow 0\)</span></p><p><span class="math display">\[a^x-1 \text{ ~ } x\ln a\]</span></p><p><span class="math display">\[\arcsin (a)x\text{ ~ } \sin (a)x \text{ ~ } (a)x\]</span></p><p><span class="math display">\[\arctan (a)x \text{ ~ } \tan (a)x \text{ ~ } (a)x\]</span></p><p><span class="math display">\[\ln (1+x)\text{ ~ } x\]</span></p><p><span class="math display">\[\sqrt{1+x}-\sqrt{1-x}\text{ ~ }x\]</span></p><p><span class="math display">\[(1+ax)^b-1\text{ ~ }abx\]</span></p><p><span class="math display">\[\sqrt[b]{1+ax}-1\text{ ~ }\frac{a}{b}x\text{    注意：当b没有时，注意b=2}\]</span></p><p><span class="math display">\[1-\cos x\text{ ~ }\frac{x^2}{2}\]</span></p><p><span class="math display">\[x-\ln (1+x)\text{ ~ }\frac{x^2}{2}\]</span></p><p><span class="math display">\[\tan x-\sin x \text{ ~ } \frac{x^3}{2}\]</span></p><p><span class="math display">\[\tan x-x \text{ ~ } \frac{x^3}{3}\]</span></p><p><span class="math display">\[x-\arctan x\text{ ~ }\frac{x^3}{3}\]</span></p><p><span class="math display">\[x-\sin x\text{ ~ }\frac{x^3}{6}\]</span></p><p><span class="math display">\[\arcsin x-x\text{ ~ }\frac{x^3}{6}\]</span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;
&lt;h2 id=&quot;绝对值函数&quot;&gt;绝对值函数&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;\(y = |x|\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;值部分（python伪代码）&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
      <category term="高等数学" scheme="http://yoursite.com/categories/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="函数与极限" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法</title>
    <link href="http://yoursite.com/2020/01/06/%E6%9C%80%E5%B0%8F%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/06/最小表示法/</id>
    <published>2020-01-06T03:58:45.695Z</published>
    <updated>2019-11-16T11:58:03.345Z</updated>
    
    <content type="html"><![CDATA[<p>#前记 偶然刷题碰见的一个自己没碰过的算法，顺手就记录下来了，后边链接是OI wiki的学习链接 <a href="https://oi-wiki.org/string/minimal-string/" target="_blank" rel="noopener" class="uri" title="OI wiki的链接">https://oi-wiki.org/string/minimal-string/</a></p><p>#算法介绍 最小表示法是用于解决字符串最小表示问题的方法，就是说字符串s[0]换到s[s.size()]，哪种表示方法的值是最小的，输出的是最小开始起点下标</p><p>不多说废话了直接贴代码 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int k &#x3D; 0, i &#x3D; 0, j &#x3D; 1;</span><br><span class="line">while (k &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">if (sec[(i + k) % n] &#x3D;&#x3D; sec[(j + k) % n]) &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125; </span><br><span class="line">else &#123;</span><br><span class="line">sec[(i + k) % n] &gt; sec[(j + k) % n] ? i &#x3D; i + k + 1 : j &#x3D; j + k + 1;</span><br><span class="line">    if (i &#x3D;&#x3D; j) i++;</span><br><span class="line">    k &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">i &#x3D; min(i, j);&#x2F;&#x2F;最小就用这个</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#前记 偶然刷题碰见的一个自己没碰过的算法，顺手就记录下来了，后边链接是OI wiki的学习链接 &lt;a href=&quot;https://oi-wiki.org/string/minimal-string/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; clas
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="字符串算法" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>康托展开</title>
    <link href="http://yoursite.com/2020/01/06/%E5%BA%B7%E6%89%98%E5%B1%95%E5%BC%80/"/>
    <id>http://yoursite.com/2020/01/06/康托展开/</id>
    <published>2020-01-06T03:58:45.680Z</published>
    <updated>2019-11-16T11:56:32.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前记">前记</h1><p>刷Aizu 0121时，这道题是需要用到康托展开作为hash，然后在这里进行a*或者bfs。借此契机重新复习（预习）一遍康托展开。原创链接，在基础上增加了自己的理解： <a href="https://oi-wiki.org/math/cantor/" target="_blank" rel="noopener" class="uri" title="康托展开">https://oi-wiki.org/math/cantor/</a></p><h1 id="康托展开算法介绍">康托展开算法介绍</h1><p>这个算法是已知一个排列，算它在全排列中排第几位，假如例子长度为5，数组数据为 [3, 2, 5, 4, 1]，那么康托展开的答案就是 2 * 4!（代表如果最高位取1或者2时数字比现在数字小）+ 1 * 3! + 2 * 2! + 1 * 1! = 59（该数组全排列大小在所有全排列数组中有59个数比这个数字字典序要小，从0数起；变相就是从1数起排名60位）。 再一个例子： [2, 5, 3, 4, 1]，答案就是1 + 4! + 3 * 3! + 2! = 45，如果计算排名就是在return那里+1就行了。</p><h2 id="算法模板">算法模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int kantor(int *num, int n)&#123;</span><br><span class="line">    int ans &#x3D; 0;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; n; i++)&#123;</span><br><span class="line">        int x &#x3D; 0, c &#x3D; 1, m &#x3D; 1;</span><br><span class="line"></span><br><span class="line">        for(int j &#x3D; i + 1; j &lt; n; j++)&#123;</span><br><span class="line">            if(num[j] &lt; num[i])&#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">            m *&#x3D; c;</span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans +&#x3D; x * m;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="逆康托展开">逆康托展开</h1><p>康托展开出来的排名和排列顺序是一一对应的 如果要逆向这个过程，引用上面自己的样例[3, 2, 5, 4, 1]，ans = 59代表有59个数比这个数字的字典序要小。先将计算出来的答案/4!，就是第一位数是啥，也即59 / (4 * 3 * 2 * 1) = 2.xxxxxx ≈ 2（向下取整），证明出来了第一位数是 3 。计算第二个位数时，先将前面计算得到的去掉，即59 - 2 * 24 = 11，然后11 / 3! = 1.xxxx ≈ 1，证明前面有1个数字小于它，第二位是2。以此类推，第三位是5 / 2! = 2.5约等于2，得出来是5。最后一位就是1了！</p><h2 id="算法模板-1">算法模板</h2><p>还未找到，先放在这里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="算法优化">算法优化</h1><p>这个算法时间复杂度是O(n^2)，看博客介绍说是可以用线段树维护使时间复杂度降为O(nlogn)，具体怎么维护还不太清楚，先放这里等进一步补充</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前记&quot;&gt;前记&lt;/h1&gt;
&lt;p&gt;刷Aizu 0121时，这道题是需要用到康托展开作为hash，然后在这里进行a*或者bfs。借此契机重新复习（预习）一遍康托展开。原创链接，在基础上增加了自己的理解： &lt;a href=&quot;https://oi-wiki.org/mat
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://yoursite.com/2020/01/06/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/06/KMP算法/</id>
    <published>2020-01-06T03:58:45.664Z</published>
    <updated>2019-10-24T10:12:39.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kmp算法">KMP算法</h1><p>现有字符串A,B A为文本，B为匹配字符</p><h2 id="自己匹配自己">自己匹配自己</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">next[1] &#x3D; 0</span><br><span class="line"></span><br><span class="line">k &#x3D; 0</span><br><span class="line"></span><br><span class="line">for i &#x3D; 2 to B.length()</span><br><span class="line">while k &gt; 0 &amp;&amp; B[k + 1] !&#x3D; B[i]</span><br><span class="line">k &#x3D; next[k]</span><br><span class="line"></span><br><span class="line">if B[k + 1] &#x3D;&#x3D; B[i]</span><br><span class="line">k++</span><br><span class="line"></span><br><span class="line">next[i] &#x3D; k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">void getnext_v() &#123;</span><br><span class="line">int j, k, len &#x3D; strlen(s);</span><br><span class="line"></span><br><span class="line">j &#x3D; 0;</span><br><span class="line">k &#x3D; -1;</span><br><span class="line">Next[0] &#x3D; -1;</span><br><span class="line">while(j &lt; len) &#123;</span><br><span class="line">if (k &#x3D;&#x3D; -1 || s[j] &#x3D;&#x3D; s[k]) &#123;</span><br><span class="line">j++;</span><br><span class="line">k++;</span><br><span class="line">Next[j] &#x3D; k;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">k &#x3D; Next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="目标串匹配文本">目标串匹配文本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">k &#x3D; 0</span><br><span class="line"></span><br><span class="line">for i &#x3D; 1 to A.length()</span><br><span class="line">while k &gt; 0 &amp;&amp; B[k + 1] !&#x3D; A[i]</span><br><span class="line">k &#x3D; next[k]</span><br><span class="line"></span><br><span class="line">if B[k + 1] &#x3D;&#x3D; A[i]</span><br><span class="line">k++</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;匹配到相应字符串</span><br><span class="line">if k &#x3D;&#x3D; m:</span><br><span class="line">&#x2F;&#x2F;匹配到的字符串起始位置</span><br><span class="line">pos &#x3D; i - m + 1</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;寻找下一个位置</span><br><span class="line">k &#x3D; next[k]</span><br></pre></td></tr></table></figure><h2 id="next数组理解">Next数组理解</h2><p>例题：POJ-2752</p><p>题目大意：求一个字符串的子串是和字符串相同前后缀的位置</p><p>根据Next数组，回溯Next数组代表着从当前的第k个到Next[k]指向的位置，字符串的前缀字符子串和当前部分字符子串是相等的。</p><p>程序代码： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">const int inf &#x3D; 0x3f3f3f3f;</span><br><span class="line">const int MAXN &#x3D; 1000005;</span><br><span class="line"> </span><br><span class="line">string s;</span><br><span class="line">int fail[MAXN];</span><br><span class="line">int ans[MAXN];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">cin.tie(0);</span><br><span class="line">cout.tie(0);</span><br><span class="line"></span><br><span class="line">while (cin &gt;&gt; s) &#123;</span><br><span class="line">fail[0] &#x3D; -1;</span><br><span class="line"></span><br><span class="line">int k &#x3D; -1;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;KMP匹配部分，其中Next数组（也即这里的fail数组，下面都称为fail数组）下标i对应的是字符串的i-1位</span><br><span class="line">for (int i &#x3D; 0; i &lt; s.size();) &#123;</span><br><span class="line">if (k &#x3D;&#x3D; -1 || s[i] &#x3D;&#x3D; s[k]) &#123;</span><br><span class="line">i++, k++;</span><br><span class="line">fail[i] &#x3D; k;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">k &#x3D; fail[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;调试输出fail数组部分</span><br><span class="line">&#x2F;*for (int i &#x3D; 0; i &lt;&#x3D; s.size(); i++) &#123;</span><br><span class="line">printf(&quot;%d &quot;, fail[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);*&#x2F;</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%s&quot;, s);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;回溯部分</span><br><span class="line">int pos &#x3D; s.size();</span><br><span class="line">stack &lt;int&gt; st;</span><br><span class="line">while (pos &gt; 0) &#123;</span><br><span class="line">st.push(pos);</span><br><span class="line">pos &#x3D; fail[pos];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;cout &lt;&lt; st.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">while (!st.empty()) &#123;</span><br><span class="line">cout &lt;&lt; st.top() &lt;&lt; &quot; &quot;;</span><br><span class="line">st.pop();</span><br><span class="line"></span><br><span class="line">first &#x3D; false;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="扩展kmp算法">扩展KMP算法</h1><p>next所代表的意思是接下来有几个字符是可以匹配到的</p><p>比如aaaaab，自己匹配自己后，next数组的值为6 4 3 2 1 0</p><p>如果用普通KMP匹配的话，next数组的值则会为0 1 2 3 4 0</p><p>例题模板（HDU-2594）部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">while (cin &gt;&gt; a &gt;&gt; b) &#123;</span><br><span class="line">Next[0] &#x3D; a.size();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;前面</span><br><span class="line">int q &#x3D; 0;</span><br><span class="line">int p &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩展KMP自己匹配自己过程（也既a匹配a）</span><br><span class="line">for (int i &#x3D; 1; i &lt; a.size(); i++) &#123;</span><br><span class="line">if (i &gt;&#x3D; p || i + Next[i - q] &gt;&#x3D; p) &#123;</span><br><span class="line">if (i &gt;&#x3D; p) &#123;</span><br><span class="line">p &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (p &lt; a.size() &amp;&amp; a[p] &#x3D;&#x3D; a[p - i]) &#123;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Next[i] &#x3D; p - i;</span><br><span class="line">q &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">Next[i] &#x3D; Next[i - q];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q &#x3D; 0, p &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;扩展KMP a匹配b过程</span><br><span class="line">for (int i &#x3D; 0; i &lt; b.size(); i++) &#123;</span><br><span class="line">if (i &gt;&#x3D; p || i + Next[i - q] &gt;&#x3D; p) &#123;</span><br><span class="line">if (i &gt;&#x3D; p) &#123;</span><br><span class="line">p &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">while (p &lt; b.size() &amp;&amp; p - i &lt; a.size() &amp;&amp; b[p] &#x3D;&#x3D; a[p - i]) &#123;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line">Extend[i] &#x3D; p - i;</span><br><span class="line">q &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">Extend[i] &#x3D; Next[i - q];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int ret &#x3D; 0;</span><br><span class="line"></span><br><span class="line">for (int i &#x3D; 0; i &lt; b.size(); i++) &#123;</span><br><span class="line">if (Extend[i] &gt; ret &amp;&amp; Extend[i] + i &#x3D;&#x3D; b.size()) &#123;</span><br><span class="line">ret &#x3D; Extend[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*if (!ret) &#123;</span><br><span class="line">cout &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">for (int i &#x3D; b.size() - ret; i &lt; b.size(); i++) &#123;</span><br><span class="line">cout &lt;&lt; b[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot; &quot; &lt;&lt; ret &lt;&lt; endl;</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印 next</span><br><span class="line">cout &lt;&lt; &quot;next:   &quot;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; a.size(); i++)</span><br><span class="line">cout &lt;&lt; Next[i] &lt;&lt; &quot; &quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印 extend</span><br><span class="line">cout &lt;&lt; &quot;\nextend: &quot;;</span><br><span class="line">for (int i &#x3D; 0; i &lt; b.size(); i++)</span><br><span class="line">cout &lt;&lt; Extend[i] &lt;&lt; &quot; &quot;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kmp算法&quot;&gt;KMP算法&lt;/h1&gt;
&lt;p&gt;现有字符串A,B A为文本，B为匹配字符&lt;/p&gt;
&lt;h2 id=&quot;自己匹配自己&quot;&gt;自己匹配自己&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="字符串算法" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机</title>
    <link href="http://yoursite.com/2020/01/06/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <id>http://yoursite.com/2020/01/06/AC自动机/</id>
    <published>2020-01-06T03:58:45.649Z</published>
    <updated>2019-11-13T03:03:29.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前记">前记</h1><p><a href="https://oi-wiki.org/string/ac-automaton/" target="_blank" rel="noopener" title="OI wiki的链接">https://oi-wiki.org/string/minimal-string/</a> 讲道理这个链接我看不太明白，然后又转到csdn的博客学习了一波</p><h1 id="算法介绍">算法介绍</h1><p>多模匹配算法，多单词匹配一个字符串算法。</p><h1 id="算法代码">算法代码</h1><p>例题HDU - 2222 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line"></span><br><span class="line">const int maxn &#x3D; 1e3 + 50;</span><br><span class="line"></span><br><span class="line">struct Node&#123;</span><br><span class="line">    int cnt;</span><br><span class="line">    Node *fail;</span><br><span class="line">    Node *next[26];</span><br><span class="line">&#125;*q[500005];&#x2F;&#x2F;q为一个模拟队列，可以用队列</span><br><span class="line">char s[1000005];</span><br><span class="line">char keyword[55];</span><br><span class="line">Node *root;</span><br><span class="line"></span><br><span class="line">void Init(Node *root)&#123;</span><br><span class="line">    root-&gt;cnt&#x3D;0;</span><br><span class="line">    root-&gt;fail&#x3D;NULL;</span><br><span class="line">    for(int i &#x3D; 0; i &lt; 26; i++)&#123;</span><br><span class="line">        root-&gt;next[i]&#x3D;NULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;建立字典树</span><br><span class="line">void Build_trie(char *keyword)&#123;</span><br><span class="line">    Node *p, *q;</span><br><span class="line">    int i, v;</span><br><span class="line">    int len &#x3D; strlen(keyword);</span><br><span class="line"></span><br><span class="line">    for(i &#x3D; 0, p &#x3D; root; i &lt; len; i++)&#123;</span><br><span class="line">        v &#x3D; keyword[i]-&#39;a&#39;;</span><br><span class="line">        if(p-&gt;next[v] &#x3D;&#x3D; NULL)&#123;</span><br><span class="line">&#x2F;&#x2F;          分配一块内存空间给q</span><br><span class="line">            q &#x3D; (struct Node *)malloc(sizeof(Node));</span><br><span class="line">            Init(q);</span><br><span class="line">            p-&gt;next[v] &#x3D; q;</span><br><span class="line">        &#125;</span><br><span class="line">        p&#x3D;p-&gt;next[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;    单词的最后一个字母节点cnt++，代表一个完整单词</span><br><span class="line">    p-&gt;cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;建立ac自动机</span><br><span class="line">void Build_AC_automation(Node *root)&#123;</span><br><span class="line">&#x2F;&#x2F;    队列头尾指针</span><br><span class="line">    int head &#x3D; 0, tail &#x3D; 0;</span><br><span class="line">&#x2F;&#x2F;    现将root入队q</span><br><span class="line">    q[head++] &#x3D; root;</span><br><span class="line">    while(head !&#x3D; tail)&#123;</span><br><span class="line">        Node *p &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;        弹出队头节点</span><br><span class="line">        Node *temp &#x3D; q[tail++];</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 0; i &lt; 26; i++)&#123;</span><br><span class="line">            if(temp-&gt;next[i] !&#x3D; NULL)&#123;</span><br><span class="line">                if(temp &#x3D;&#x3D; root)&#123;</span><br><span class="line">&#x2F;&#x2F;                    如弹出队列的为根节点</span><br><span class="line">                    temp-&gt;next[i]-&gt;fail&#x3D;root;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    p&#x3D;temp-&gt;fail;</span><br><span class="line">                    while(p !&#x3D; NULL)&#123;</span><br><span class="line">                        if(p-&gt;next[i] !&#x3D; NULL)&#123;</span><br><span class="line">                            temp-&gt;next[i]-&gt;fail&#x3D;p-&gt;next[i];</span><br><span class="line">                            break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p&#x3D;p-&gt;fail;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    if(p &#x3D;&#x3D; NULL)&#123;</span><br><span class="line">                        temp-&gt;next[i]-&gt;fail &#x3D; root;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                q[head++]&#x3D;temp-&gt;next[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(Node *root)&#123;</span><br><span class="line">&#x2F;&#x2F;    i为主串指针，p为模式串指针</span><br><span class="line">    int i, v, cnt &#x3D; 0;</span><br><span class="line">    Node *p &#x3D; root;</span><br><span class="line">    int len &#x3D; strlen(s);</span><br><span class="line">    for(i &#x3D; 0; i &lt; len; i++)&#123;</span><br><span class="line">        v&#x3D;s[i] - &#39;a&#39;;</span><br><span class="line">&#x2F;&#x2F;        失败指针回溯查找，判断s[i]是否存在于字典树中</span><br><span class="line">        while(p-&gt;next[v] &#x3D;&#x3D; NULL &amp;&amp; p !&#x3D; root)&#123;</span><br><span class="line">            p&#x3D;p-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p&#x3D;p-&gt;next[v];</span><br><span class="line"></span><br><span class="line">        if(p &#x3D;&#x3D; NULL)&#123;</span><br><span class="line">            p &#x3D; root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node *temp &#x3D; p;</span><br><span class="line">        while(temp !&#x3D; root)&#123;</span><br><span class="line">            if(temp-&gt;cnt &gt;&#x3D; 0)&#123;</span><br><span class="line">                cnt +&#x3D; temp-&gt;cnt;</span><br><span class="line">                temp-&gt;cnt&#x3D; -1;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            temp&#x3D;temp-&gt;fail;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    ios::sync_with_stdio(false);</span><br><span class="line">    cin.tie(0);</span><br><span class="line">    cout.tie(0);</span><br><span class="line"></span><br><span class="line">    int T, n;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;T);</span><br><span class="line">    while(T--)&#123;</span><br><span class="line">        root &#x3D; (struct Node *)malloc(sizeof(Node));</span><br><span class="line">        Init(root);</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">        for(int i &#x3D; 0; i &lt; n; i++)&#123;</span><br><span class="line">            scanf(&quot;\n%s&quot;, keyword);</span><br><span class="line">            Build_trie(keyword);</span><br><span class="line">        &#125;</span><br><span class="line">        Build_AC_automation(root);</span><br><span class="line">        scanf(&quot;\n%s&quot;, s);</span><br><span class="line">        printf(&quot;%d\n&quot;, query(root));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前记&quot;&gt;前记&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://oi-wiki.org/string/ac-automaton/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot; title=&quot;OI wiki的链接&quot;&gt;https://oi-wiki
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="ACM" scheme="http://yoursite.com/tags/ACM/"/>
    
      <category term="字符串算法" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    
      <category term="未完整博客" scheme="http://yoursite.com/tags/%E6%9C%AA%E5%AE%8C%E6%95%B4%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
